#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('apiserver:server');
var http = require('http');

var https = require('https');
var fs = require('fs');

var WebSocket = require('ws');

var mdbmgr = require("../public/db/mdbmgr");

var clientws;

var HTTP_PORT_DEV = 8080;
var HTTPS_PORT_DEV = 446;
var HTTP_PORT = 80;
var HTTPS_PORT = 443;
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
var port_https = HTTPS_PORT;
//add-start-dev
port = HTTP_PORT;
//add-end-dev
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


const wss = new WebSocket.Server({ server });

wss.on('connection', function(ws) {
  console.log('connection come');
  mdbmgr.sendPrintData(sendMess);
  clientws = ws;
  const id = setInterval(function() {
    ws.send('message from server', function() {
      //
      // Ignore errors.
      //
      console.log('error occuputs');
    });
  }, 10000);
  console.log('started client interval');

  

  ws.on('message', function(message) {
    //
    // Here we can now use session parameters.
    //
    console.log(`Received message ${message} from user `);
    mdbmgr.updateOrderInfo(message);
    
  });

  ws.on('close', function() {
    console.log('stopping client interval');
    clientws = null;
    clearInterval(id);
  });
});

var sendMess = function(jsondata) {
  var datastr = JSON.stringify(jsondata);
  console.log(datastr);
  if(clientws != null) {
    clientws.send(datastr);
  }
};
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var options = {
	key: fs.readFileSync('./keys/2094691_www.vtuanba.cn.key'),
	cert: fs.readFileSync('./keys/2094691_www.vtuanba.cn.pem')
};

var httpsserver = https.createServer(options, app);
httpsserver.listen(port_https);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports.sendMess = sendMess;
